{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","handleSort","isReversed","handleReverse","allGoods","goods","visibleGoods","sort","item1","item2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAA+BC,mBAASH,EAASI,MAAjD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAOMC,EAnCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITX,GACFI,EAAaQ,UAGRR,EAaDS,CAAkBnB,EAAiB,CAAEM,aAAYF,aAEvD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYlB,IAAaL,EAASe,WAEtCS,QAAS,kBAAMlB,EAAWN,EAASe,WANrC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYlB,IAAaL,EAASiB,SAEtCO,QAAS,kBAAMlB,EAAWN,EAASiB,SANrC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAeD,IANhC,sBAWEF,IAAaL,EAASI,MAAQG,IAE5B,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAjDQ,WAClBlB,EAAWN,EAASI,MACpBI,GAAc,IA4CN,sBAUN,6BACE,6BACGC,EAASgB,KAAI,SAAAC,GAAI,OAChB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cCpHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.caa57081.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((item1, item2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return item1.localeCompare(item2);\n\n      case SortType.LENGTH:\n        return item1.length - item2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, handleSort] = useState(SortType.NONE);\n  const [isReversed, handleReverse] = useState(false);\n\n  const handleReset = () => {\n    handleSort(SortType.NONE);\n    handleReverse(false);\n  };\n\n  const allGoods\n      = getReorderedGoods(goodsFromServer, { isReversed, sortType });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => handleSort(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => handleSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => handleReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {allGoods.map(item => (\n            <li\n              key={item}\n              data-cy=\"Good\"\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}